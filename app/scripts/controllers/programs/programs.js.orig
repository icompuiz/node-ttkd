define(['../module'], function(controllers){
	'use strict';
	controllers.controller('ProgramsCtrl', ['$scope', '$state', 'Restangular', 'ProgramSvc', 'ClassSvc', 'RankSvc', 
		function($scope, $state, Restangular, ProgramSvc, ClassSvc, RankSvc) {
			$scope.allChecked = false;
			$scope.currentProgram = {};

			if (ProgramSvc.current) {
				$scope.currentProgram = ProgramSvc.current;
			} 

<<<<<<< HEAD
			$scope.getPrograms = function() {
				ProgramSvc.list().then(function(programs) {
					//Get class objects and put into programs
					ClassSvc.list().then(function(classes) {
						var i;
						for(i=0; i<programs.length; i++) {
							programs[i].classes = _.where(classes, {'program': programs[i]._id});
=======
		$scope.programs = {};
		$scope.model = {
			classes: [],
			ranks: []
		};

		if (!ProgramFactory.current) {
			$scope.model = ProgramFactory.init($scope.model);
		} else {
			$scope.model = ProgramFactory.current;
		}


		$scope.newClass = {};
		$scope.newRank = {};
		$scope.allChecked = false;

		$scope.getPrograms = function() {
			basePrograms.getList().then(function(programs) {
				//Fetch and display the program's classes' names
				baseClasses.getList().then(function(classes) {
					var i;
					var programClasses = classes;
					for(i=0; i<programs.length; i++) {
						programClasses = _.where(classes, {'program': programs[i]._id});
						programs[i].classNames = [];
						var j;
	 					for(j=0; j<programClasses.length; j++) {
							programs[i].classNames.push(programClasses[j].name);
>>>>>>> 8512625d1be8362f6d952bc8d26a28b39f3db6a8
						}
					});
					//Get rank objects and put into programs
					RankSvc.list().then(function(ranks) {
						var i;
						for(i=0; i<programs.length; i++) {
							programs[i].ranks = _.where(ranks, {'program': programs[i]._id});
						}
					});
					$scope.programs = programs;
				});
			};
			$scope.getPrograms();

			$scope.removeProgram = function(program) {
				async.parallel([
					function(callback, err) {
						//Remove program's classes
						async.each(program.classes,
							function(classToRemove, callback) {
								ClassSvc.init(classToRemove);
								ClassSvc.remove().then(function() {
									callback();
									ClassSvc.reset();
								});
							},
							function(err) {
								callback();
							}
						);
					},
					function(callback, err) {
						//Remove program's ranks
						async.each(program.ranks,
							function(rankToRemove, callback) {
								RankSvc.init(rankToRemove);
								RankSvc.remove().then(function() {
									callback();
									RankSvc.reset();
								});
							},
							function(err) {
								callback();
							}
						);
					}, 
					function(err) {
						//Remove program
						ProgramSvc.init(program);
						ProgramSvc.remove().then(function() {
							$scope.programs = _.without($scope.programs, program);
							ProgramSvc.reset();
					});
				}]);
			};

			$scope.goToCreateProgram = function() {
				$state.go('admin.programs.create');
			};

			$scope.goToProgramsHome = function() {
				ProgramSvc.reset();
				$state.go('admin.programs.home');
			};

<<<<<<< HEAD
			$scope.checkAll = function() {
				var i;
				for(i=0; i<$scope.programs.length; i++){
					$scope.programs[i].selected = $scope.allChecked;
				}
=======
		$scope.addProgram = function() {
			var programToAdd = {
				name: $scope.model.name
>>>>>>> 8512625d1be8362f6d952bc8d26a28b39f3db6a8
			};

			$scope.removeSelected = function() {
				var i;
				for(i=0; i<$scope.programs.length; i++) {
					if($scope.programs[i].selected){
						$scope.removeProgram($scope.programs[i]);
					}
				}
			};

			$scope.goToEditProgram = function(program) {
				ProgramSvc.init(program);
				$state.go('admin.programs.edit');
			};

			$scope.goToViewProgram = function(program) {
				ProgramSvc.init(program);
				$state.go('admin.programs.view');
			};

			$scope.saveProgram = function(program) {
				var classIDs = [],
					rankIDs = [];
<<<<<<< HEAD

				(function(classIDs, rankIDs) {
					async.each(program.classes,
						function(classItem, callback) {
							ClassSvc.init(classItem);
							ClassSvc.save().then(function(result) {
								classIDs.push(result._id);
								callback();
							});
						},
=======
				//Add classes to db
				(function(classIDs, rankIDs){
					async.parallel([
						function(callback, err) {
							//Add classes
							async.each($scope.model.classes,
								function(classItem, callback) {
									var classToAdd = {
										name: classItem.name,
										program: programAdded._id
									};
									//POST each new class and add object ID to array
									baseClasses.post(classToAdd).then(function(classAdded, err){
										classIDs.push(classAdded._id);
										callback();
									});
								},
								function(err) {
									callback();
								}
							);
						},
						function(callback, err) {
							//Add classes
							async.each($scope.model.ranks,
								function(rankItem, callback) {
									var rankToAdd = {
										name: rankItem.name,
										program: programAdded._id
									};
									//POST each new class and add object ID to array
									baseRanks.post(rankToAdd).then(function(rankAdded, err){
										rankIDs.push(rankAdded._id);
										callback();
									});
								},
								function(err) {
									callback();
								}
							);
						}],
>>>>>>> 8512625d1be8362f6d952bc8d26a28b39f3db6a8
						function(err) {
							program.classes = classIDs;
							program.ranks = [];
							ProgramSvc.save().then(function(result) {
								console.log('post-save');
							});
<<<<<<< HEAD
							$state.go('admin.programs.home');
						});
				})(classIDs, rankIDs);
			};
=======
							$scope.model = {};
							$scope.model.classes = {};
							$scope.model.ranks = {};
					});
				})(classIDs, rankIDs);
			});
		};

		$scope.addClass = function() {
			$scope.model.classes.push($scope.newClass);
			$scope.newClass = {};
		};

		$scope.addRank = function() {
			$scope.model.ranks.push($scope.newRank);
			$scope.newRank = {};
		};

		$scope.checkAll = function() {
			var i;
			for(i=0; i<$scope.programs.length; i++){
				$scope.programs[i].selected = $scope.allChecked;
			}
		};

		$scope.removeSelected = function() {
			var i;
			for(i=0; i<$scope.programs.length; i++) {
				if($scope.programs[i].selected){
					$scope.removeProgram($scope.programs[i]);
				}
			}
		};
>>>>>>> 8512625d1be8362f6d952bc8d26a28b39f3db6a8
	}]);
});	